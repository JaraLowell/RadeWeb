// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RadegastWeb.Data;

#nullable disable

namespace RadegastWeb.Migrations
{
    [DbContext(typeof(RadegastDbContext))]
    [Migration("20251028111813_AddInteractiveNoticeFields")]
    partial class AddInteractiveNoticeFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("RadegastWeb.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AvatarRelayUuid")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("AvatarUuid")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentRegion")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("GridUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("RadegastWeb.Models.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Channel")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChatType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RegionName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderUuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("IX_ChatMessage_SessionId");

                    b.HasIndex("AccountId", "ChatType", "Timestamp")
                        .HasDatabaseName("IX_ChatMessage_Account_Type_Time");

                    b.HasIndex("AccountId", "SessionId", "Timestamp")
                        .HasDatabaseName("IX_ChatMessage_Account_Session_Time");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("RadegastWeb.Models.GlobalDisplayName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AvatarId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CachedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayNameValue")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefaultDisplayName")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LegacyFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LegacyLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NextUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId")
                        .IsUnique()
                        .HasDatabaseName("IX_GlobalDisplayName_Avatar");

                    b.HasIndex("CachedAt")
                        .HasDatabaseName("IX_GlobalDisplayName_CachedAt");

                    b.HasIndex("LastUpdated")
                        .HasDatabaseName("IX_GlobalDisplayName_LastUpdated");

                    b.ToTable("GlobalDisplayNames");
                });

            modelBuilder.Entity("RadegastWeb.Models.Notice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("AcceptedResponse")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AttachmentName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("AttachmentType")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalRequestId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FromId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("FromName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasAttachment")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasResponse")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAcknowledged")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsInteractive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresAcknowledgment")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId", "Timestamp")
                        .HasDatabaseName("IX_Notice_Account_Time");

                    b.HasIndex("AccountId", "IsRead", "Timestamp")
                        .HasDatabaseName("IX_Notice_Account_Read_Time");

                    b.HasIndex("AccountId", "Type", "Timestamp")
                        .HasDatabaseName("IX_Notice_Account_Type_Time");

                    b.ToTable("Notices");
                });

            modelBuilder.Entity("RadegastWeb.Models.VisitorStats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AvatarId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("AvatarName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FirstSeenAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastSeenAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<uint>("RegionX")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("RegionY")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("SimHandle")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FirstSeenAt")
                        .HasDatabaseName("IX_VisitorStats_FirstSeenAt");

                    b.HasIndex("VisitDate")
                        .HasDatabaseName("IX_VisitorStats_VisitDate");

                    b.HasIndex("RegionName", "VisitDate")
                        .HasDatabaseName("IX_VisitorStats_Region_Date");

                    b.HasIndex("AvatarId", "RegionName", "VisitDate")
                        .IsUnique()
                        .HasDatabaseName("IX_VisitorStats_Avatar_Region_Date");

                    b.ToTable("VisitorStats");
                });

            modelBuilder.Entity("RadegastWeb.Models.ChatMessage", b =>
                {
                    b.HasOne("RadegastWeb.Models.Account", "Account")
                        .WithMany("ChatMessages")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("RadegastWeb.Models.Notice", b =>
                {
                    b.HasOne("RadegastWeb.Models.Account", "Account")
                        .WithMany("Notices")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("RadegastWeb.Models.Account", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("Notices");
                });
#pragma warning restore 612, 618
        }
    }
}
